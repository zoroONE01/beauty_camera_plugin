group = "com.example.beauty_camera_plugin"
version = "1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = "1.8.22"
    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:8.7.0")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

android {
    namespace = "com.example.beauty_camera_plugin"

    compileSdk = 35
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
    }

    defaultConfig {
        minSdk = 21
    }

    dependencies {
        implementation("androidx.core:core-ktx:1.13.1") // Ensure this is present and up-to-date
        implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.2")
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")

        // CameraX core and components
        implementation("androidx.camera:camera-core:1.3.3")
        implementation("androidx.camera:camera-camera2:1.3.3") // For Camera2 interop
        implementation("androidx.camera:camera-lifecycle:1.3.3")
        implementation("androidx.camera:camera-view:1.3.3") // For PreviewView
        implementation("androidx.camera:camera-extensions:1.3.3") // Optional, for extensions like HDR, Night, etc.
        
        // ExifInterface for reading orientation data
        implementation("androidx.exifinterface:exifinterface:1.3.7")

        testImplementation("org.jetbrains.kotlin:kotlin-test")
        testImplementation("org.mockito:mockito-core:5.0.0")
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()

            testLogging {
               events "passed", "skipped", "failed", "standardOut", "standardError"
               outputs.upToDateWhen {false}
               showStandardStreams = true
            }
        }
    }
}
